#![allow(warnings)]
#[cfg(test)]
pub(in crate::tests) mod indcpa_tests {
    use crate::{indcpa::*, params::*, polynomials::*, vectors::*, matrix::*, tests::params::params_tests::sec_level_strategy};
    use proptest::prelude::*;
    use rand::rngs::StdRng;
    use rand::{Rng, SeedableRng};
    use tinyvec::{array_vec, ArrayVec};

    impl Matrix<Montgomery> {
        pub(in crate::tests) fn test_mat() -> Self {
            let polyvecs = array_vec!([PolyVec<Montgomery>; 4] => 
                PolyVec::from(array_vec!([Poly<Montgomery>; 4] =>
                    Poly::from_arr(&[1420, 3190, 3247, 2334, 2181, 3085, 2414, 1362, 3291, 3120, 852, 490, 371, 2633, 631, 911, 2595, 1054, 2501, 2401, 877, 2158, 913, 1098, 2955, 814, 2910, 1689, 386, 900, 875, 693, 1430, 2228, 1541, 64, 229, 696, 1810, 2050, 2684, 2491, 3156, 2686, 3195, 1891, 945, 222, 499, 934, 2159, 577, 816, 3151, 1988, 192, 1714, 1937, 999, 2171, 1524, 3102, 860, 2049, 1118, 772, 1295, 1183, 2384, 2591, 2669, 1133, 1409, 502, 1815, 2489, 337, 776, 2323, 1006, 2617, 90, 1416, 1769, 258, 2345, 3017, 1787, 1570, 1715, 747, 783, 2369, 1704, 2911, 2259, 2459, 1435, 368, 3270, 1240, 991, 181, 2335, 1151, 1168, 1432, 1327, 2822, 1199, 1510, 1835, 2695, 1155, 1059, 2995, 361, 559, 3116, 1713, 1290, 506, 972, 3029, 1202, 225, 200, 893, 541, 3066, 2756, 420, 2326, 1543, 928, 2670, 3051, 304, 1929, 1056, 769, 647, 942, 2221, 1672, 476, 1314, 1785, 680, 623, 586, 1236, 2848, 2944, 2420, 2102, 1958, 2841, 1905, 1063, 1820, 3114, 1213, 1652, 2185, 3059, 2624, 2913, 2594, 2229, 2302, 2133, 2044, 356, 206, 1815, 2111, 2220, 601, 1070, 1117, 2650, 3273, 433, 3247, 1493, 2289, 2823, 2465, 2976, 1861, 1258, 1217, 2145, 1060, 1241, 1040, 486, 1269, 23, 9, 2670, 849, 554, 2530, 267, 3051, 2011, 2856, 2138, 1017, 744, 2070, 1750, 2774, 382, 2320, 763, 1836, 240, 2986, 1925, 512, 1820, 3160, 2363, 1585, 2861, 853, 250, 1534, 2277, 2006, 3213, 2321, 2326, 1311, 3064, 1082, 547, 2798, 915, 615, 2881, 2811, 413, 240, 393, 2578, 264, 197, 1779, 322, 2574, 3210, 1460]).mont_form(),
                    Poly::from_arr(&[2089, 3312, 1862, 3195, 549, 2842, 3083, 2734, 1225, 376, 2502, 2613, 2327, 455, 800, 2328, 2188, 2493, 2776, 1973, 2535, 771, 3203, 1865, 2255, 1794, 724, 2842, 386, 2062, 2114, 2669, 1596, 848, 1489, 39, 2471, 1516, 436, 669, 1305, 2754, 1901, 341, 2047, 863, 1862, 1393, 977, 3057, 92, 1541, 2256, 2984, 1827, 2013, 1080, 1954, 3159, 1714, 1561, 1329, 3181, 403, 164, 2983, 1666, 2654, 219, 2399, 708, 1470, 298, 2028, 2341, 2146, 3171, 2555, 921, 226, 419, 2077, 1371, 1577, 2689, 1703, 655, 1256, 895, 1873, 1682, 84, 1056, 976, 2408, 3288, 1075, 230, 855, 2035, 3261, 250, 1242, 535, 1611, 593, 70, 1601, 2494, 280, 2749, 500, 2759, 959, 1708, 2399, 4, 1374, 568, 2801, 2430, 2001, 14, 2096, 2952, 2165, 2181, 657, 747, 1003, 184, 982, 1370, 1922, 96, 760, 1181, 2452, 1351, 1468, 3279, 3082, 2635, 2063, 3088, 827, 2830, 2888, 2025, 2957, 880, 2765, 2189, 1228, 111, 162, 2666, 2262, 842, 2856, 2657, 135, 2455, 2646, 389, 200, 2137, 2305, 1184, 974, 2619, 3198, 1186, 523, 2444, 2145, 347, 259, 2463, 1679, 2460, 1075, 2923, 2459, 268, 219, 3177, 3142, 2277, 1751, 2387, 2354, 835, 3198, 1419, 1820, 2008, 442, 2627, 1391, 1004, 2731, 582, 925, 2439, 3057, 1254, 1508, 2932, 2958, 1418, 2750, 1105, 3127, 345, 131, 3201, 1504, 1849, 1081, 1456, 2663, 2526, 2390, 3034, 1755, 1778, 1822, 2322, 1089, 1394, 2519, 3189, 3150, 749, 1438, 1578, 2675, 2391, 369, 2987, 645, 703, 2136, 843, 2415, 3204, 125, 1774, 2655, 2006, 3257, 2041, 1150, 2109, 2594]).mont_form(),
                    Poly::from_arr(&[1698, 372, 3239, 31, 638, 3013, 850, 3141, 1529, 3106, 2049, 3074, 156, 1545, 559, 1450, 1140, 641, 503, 669, 936, 2105, 2389, 1721, 2530, 1739, 775, 1583, 712, 1101, 658, 3060, 2269, 1497, 649, 3168, 2530, 1933, 2619, 2895, 316, 2946, 370, 125, 853, 1343, 2959, 2027, 1747, 711, 1900, 464, 952, 1646, 572, 2367, 2538, 82, 567, 1233, 686, 1186, 3132, 529, 3198, 2087, 2215, 2203, 599, 144, 2833, 1908, 1616, 2914, 469, 747, 1563, 113, 1636, 1265, 3221, 2084, 1191, 1822, 835, 2863, 301, 375, 2680, 1961, 1051, 50, 1278, 2612, 791, 3224, 1707, 2215, 142, 1170, 503, 1814, 1580, 1937, 577, 1906, 3098, 1990, 1366, 46, 1931, 748, 1782, 2951, 2886, 1850, 775, 1506, 2852, 951, 637, 118, 692, 347, 1798, 923, 2448, 3073, 2192, 389, 2662, 2578, 521, 1932, 1886, 2168, 3215, 642, 882, 338, 1940, 1163, 64, 237, 771, 1448, 117, 1197, 31, 212, 20, 2531, 1727, 293, 2826, 2977, 2954, 1903, 1397, 1386, 2803, 1789, 1215, 2011, 1279, 3264, 1298, 1872, 1383, 1322, 2500, 1800, 3120, 1340, 282, 326, 1135, 2471, 920, 1887, 825, 2070, 2847, 393, 1547, 1989, 1314, 2919, 2462, 2156, 2328, 2243, 2232, 589, 1095, 1522, 2740, 1713, 940, 1331, 1668, 1319, 1724, 1404, 504, 376, 2284, 1801, 837, 639, 784, 43, 2490, 270, 1179, 3324, 2586, 1528, 1075, 867, 2393, 1873, 2682, 2224, 2788, 2633, 716, 1503, 2265, 969, 2827, 1740, 2812, 3230, 1758, 1572, 524, 229, 2944, 2831, 1474, 2703, 1858, 1286, 2274, 1268, 596, 2108, 986, 751, 2270, 2504, 1319, 1982, 2542, 898]).mont_form(),
                )).unwrap(),
                PolyVec::from(array_vec!([Poly<Montgomery>; 4] =>
                    Poly::from_arr(&[114, 61, 384, 227, 531, 2434, 1151, 2522, 2223, 2008, 2677, 456, 1928, 1832, 2831, 1622, 2249, 2979, 3079, 1771, 2027, 1448, 2952, 1303, 2585, 2012, 1741, 827, 3117, 784, 2106, 1052, 2657, 1884, 1100, 2400, 335, 1041, 925, 1456, 2964, 366, 653, 2765, 900, 2875, 3143, 2520, 833, 1944, 1570, 2773, 1021, 357, 874, 627, 2464, 2056, 2447, 1220, 634, 2445, 2052, 642, 2243, 2018, 1768, 332, 795, 3248, 3211, 3323, 1856, 2283, 160, 498, 1292, 1016, 297, 1943, 1447, 3020, 1023, 837, 766, 831, 2769, 1609, 553, 3169, 3181, 307, 3230, 1507, 877, 3030, 687, 1605, 2173, 2925, 2997, 1955, 2115, 2759, 2434, 1462, 2818, 2778, 1133, 2493, 3209, 3325, 2624, 1906, 3258, 441, 1588, 417, 1324, 3128, 3104, 1739, 2658, 2365, 2395, 10, 2167, 468, 1158, 1688, 2858, 1271, 2022, 2334, 21, 358, 594, 1725, 127, 1885, 1195, 2270, 1719, 757, 56, 1849, 1230, 2873, 1042, 1979, 2736, 1220, 1573, 1762, 1208, 3118, 848, 256, 3298, 557, 1914, 2492, 2578, 2590, 1577, 203, 1395, 500, 243, 2263, 1392, 994, 1958, 1265, 814, 847, 1690, 1883, 2215, 2724, 1701, 757, 281, 1286, 488, 1576, 1141, 1716, 3193, 1561, 2178, 1611, 2618, 291, 1677, 906, 91, 2672, 2650, 205, 873, 1847, 533, 1287, 2492, 2279, 2461, 2657, 1898, 934, 1742, 472, 3052, 1978, 577, 1213, 2275, 735, 1841, 1938, 1702, 3260, 1420, 2428, 2965, 3288, 1626, 443, 2637, 1291, 1911, 1757, 8, 3117, 2148, 400, 5, 222, 941, 2591, 1492, 366, 189, 2928, 1887, 1017, 1023, 2769, 2045, 3055, 762, 3002, 1199, 2198, 1788, 1547]).mont_form(),
                    Poly::from_arr(&[3290, 510, 1747, 1465, 2694, 204, 2295, 3302, 3136, 2394, 2608, 2075, 2271, 1996, 3078, 2025, 1330, 2065, 1106, 2786, 2142, 2509, 877, 343, 2498, 178, 1432, 3247, 443, 1494, 2049, 350, 2070, 2588, 2726, 1556, 2774, 881, 1413, 2536, 3068, 1640, 1739, 43, 1603, 833, 1459, 2391, 2350, 2979, 53, 1459, 3044, 920, 3009, 1083, 1460, 2, 1240, 3143, 102, 2301, 3204, 388, 402, 2061, 2141, 1876, 3300, 2923, 1420, 1428, 868, 3212, 678, 1008, 811, 658, 1823, 3025, 1397, 2759, 1086, 209, 2225, 1823, 853, 2982, 2427, 1801, 975, 2878, 3328, 967, 2607, 1222, 1703, 384, 80, 1828, 2295, 802, 3252, 301, 1629, 3035, 1913, 2784, 2048, 2475, 2839, 115, 1295, 1058, 1142, 2179, 2119, 441, 2929, 1883, 1610, 1421, 1576, 192, 782, 2990, 1236, 2809, 501, 1738, 2673, 870, 2015, 595, 1959, 38, 2245, 2291, 1776, 1679, 1748, 826, 2486, 751, 59, 2442, 2881, 886, 2480, 2925, 3297, 1898, 200, 1900, 1324, 3075, 1272, 1233, 2155, 1618, 2796, 1062, 2843, 1657, 907, 422, 1373, 2573, 2922, 155, 2005, 751, 160, 595, 3075, 3050, 2084, 2318, 2372, 2595, 1611, 3060, 2207, 277, 1700, 316, 330, 192, 731, 2242, 86, 2632, 2163, 1741, 1311, 654, 2143, 1328, 2078, 3038, 2239, 2338, 168, 1017, 2368, 2365, 2591, 1495, 2950, 2307, 3327, 2281, 306, 800, 1707, 676, 2551, 240, 2492, 1813, 2680, 1418, 714, 2736, 859, 1028, 2451, 1028, 2075, 118, 2430, 111, 2793, 59, 2323, 2002, 2235, 1599, 1302, 2524, 2242, 1140, 3120, 1405, 2140, 3261, 288, 2383, 513, 1968, 1347, 2876, 2894, 403, 2563, 840]).mont_form(),
                    Poly::from_arr(&[1375, 240, 1424, 1887, 722, 406, 3283, 2292, 494, 1728, 417, 405, 1368, 1008, 3017, 2387, 1131, 3145, 1339, 305, 2600, 38, 2969, 728, 3217, 1176, 249, 22, 262, 989, 2301, 2885, 1458, 2647, 153, 1702, 3304, 2829, 2935, 2823, 1406, 2372, 647, 1796, 1769, 1656, 403, 259, 882, 647, 2021, 1559, 1619, 1778, 88, 3035, 1211, 96, 1682, 1092, 1568, 2097, 1196, 2429, 2849, 1155, 185, 3248, 576, 2028, 2490, 2225, 1928, 1551, 2715, 2373, 1389, 933, 3303, 257, 2195, 100, 1318, 1535, 2722, 2354, 75, 1062, 3242, 68, 2925, 3092, 2293, 448, 1581, 694, 336, 2305, 2203, 2157, 2672, 1848, 2665, 2017, 363, 851, 2560, 2534, 1573, 1548, 1111, 688, 2203, 1912, 2064, 1575, 828, 1330, 1858, 76, 726, 870, 3049, 2296, 2633, 1244, 214, 2256, 2185, 2356, 1392, 2075, 1397, 1879, 3161, 2414, 1690, 1452, 2078, 2757, 2047, 2363, 1542, 2939, 678, 2898, 2135, 915, 102, 1598, 441, 2838, 2217, 3199, 1003, 1485, 3289, 1197, 2858, 194, 2776, 1777, 1110, 2192, 2466, 210, 399, 873, 1814, 3225, 952, 463, 3289, 2430, 1310, 1313, 1355, 1770, 984, 2682, 814, 1181, 1743, 1521, 2385, 2398, 2029, 1297, 1256, 1306, 1847, 2896, 1055, 983, 2268, 714, 3143, 2883, 3287, 924, 1075, 1361, 1658, 500, 2332, 1582, 2116, 1703, 1508, 2380, 2052, 2296, 2454, 2589, 1479, 1597, 2604, 3, 1175, 1201, 974, 1785, 240, 699, 2848, 2157, 805, 244, 1447, 972, 627, 3069, 1141, 2916, 1779, 932, 297, 409, 939, 1066, 703, 630, 1076, 2273, 1063, 743, 1056, 3052, 1616, 1088, 1296, 3258, 2656, 3047, 662, 737]).mont_form(),
                )).unwrap(),
                PolyVec::from(array_vec!([Poly<Montgomery>; 4] =>
                    Poly::from_arr(&[3154, 1814, 2335, 1881, 390, 2401, 544, 599, 128, 1052, 837, 1927, 1569, 303, 912, 424, 769, 2967, 573, 1222, 2325, 3096, 3190, 436, 2603, 2587, 1640, 1130, 1626, 2840, 522, 2232, 2828, 1292, 344, 1663, 169, 2471, 683, 155, 1427, 2509, 3014, 1936, 1952, 780, 592, 1944, 763, 1752, 1472, 633, 221, 3099, 1550, 3222, 3201, 2328, 3260, 1306, 394, 1241, 73, 785, 262, 1542, 2962, 440, 245, 1133, 2984, 2023, 1206, 1498, 1991, 1661, 2981, 51, 2055, 284, 2565, 504, 551, 778, 299, 3093, 5, 1608, 1561, 1963, 3326, 1546, 1694, 3216, 1062, 2326, 2925, 506, 2576, 1554, 3071, 1464, 1223, 1996, 602, 2503, 2762, 1127, 1289, 336, 714, 2568, 3131, 1531, 2325, 569, 2345, 1371, 960, 1458, 1933, 2755, 927, 615, 1126, 3054, 1500, 2132, 2779, 1213, 1713, 1918, 344, 2627, 40, 1109, 3132, 2632, 3034, 259, 1918, 990, 1666, 459, 1712, 2911, 907, 772, 1957, 1115, 1747, 1424, 1477, 1228, 391, 2513, 2206, 687, 3148, 1416, 1518, 3115, 433, 3161, 1155, 71, 2227, 1153, 665, 2630, 1271, 1485, 180, 275, 2437, 1628, 1729, 2009, 3008, 3293, 762, 1621, 2633, 1634, 1075, 2093, 622, 3150, 205, 2613, 1146, 2797, 2665, 62, 1212, 2050, 2244, 1678, 2078, 3302, 3199, 3237, 2862, 1967, 1134, 1322, 2236, 381, 2660, 1717, 2631, 461, 2641, 416, 525, 1900, 2069, 1519, 955, 2192, 1688, 2290, 718, 1110, 2597, 639, 2755, 3272, 1300, 2250, 1570, 2413, 2974, 1818, 2501, 2482, 2910, 235, 3170, 2152, 628, 7, 1793, 632, 3071, 1064, 469, 761, 117, 1295, 2060, 1640, 1190, 33, 1782, 918]).mont_form(),
                    Poly::from_arr(&[1302, 1228, 1694, 88, 3050, 2942, 2365, 888, 1529, 218, 628, 847, 1397, 2271, 414, 2698, 1434, 1558, 2344, 3055, 774, 2688, 2507, 2677, 84, 1786, 634, 351, 754, 1193, 2208, 562, 29, 384, 2367, 3065, 1716, 1493, 1869, 198, 1757, 2503, 2492, 1501, 947, 982, 2296, 3110, 718, 606, 1628, 2554, 2319, 1099, 1765, 2611, 3103, 818, 2909, 2461, 490, 460, 1654, 51, 2405, 2886, 588, 1802, 2057, 331, 1978, 2078, 1751, 2954, 2091, 1727, 2010, 2185, 1975, 1952, 3165, 118, 2958, 2017, 2363, 1586, 1654, 798, 2956, 2843, 3228, 2985, 3163, 1417, 1344, 2250, 78, 2212, 674, 2830, 830, 3039, 599, 1526, 851, 836, 614, 1366, 119, 1923, 2197, 208, 579, 2279, 1066, 1968, 2308, 610, 1629, 2117, 2026, 330, 338, 267, 2019, 254, 974, 279, 937, 788, 640, 1878, 21, 1788, 1739, 1886, 1702, 1937, 799, 80, 2108, 3120, 2486, 1195, 504, 982, 1909, 150, 2737, 149, 3249, 966, 2323, 1372, 1310, 2409, 1582, 1658, 3158, 329, 2998, 444, 2317, 2268, 1991, 727, 2145, 441, 630, 2606, 2147, 375, 1908, 2552, 1353, 687, 1036, 1669, 539, 754, 2679, 628, 1220, 923, 1728, 501, 3155, 845, 2086, 961, 954, 178, 3303, 2600, 376, 380, 1255, 1269, 85, 2901, 3321, 728, 2719, 91, 1480, 969, 700, 1477, 375, 3291, 631, 1043, 2649, 2830, 977, 1177, 2742, 507, 1222, 182, 431, 1933, 2278, 181, 157, 1730, 791, 553, 1298, 748, 2856, 131, 3095, 1782, 1089, 2492, 1686, 895, 189, 465, 1560, 362, 828, 1416, 1722, 2664, 742, 1877, 3261, 3041, 1462, 2270, 434, 1909, 1182, 1235]).mont_form(),
                    Poly::from_arr(&[491, 2085, 917, 393, 3316, 2664, 2721, 1795, 960, 1092, 358, 1445, 1656, 62, 2836, 2933, 1841, 1005, 853, 918, 906, 528, 2275, 891, 872, 1137, 2238, 3176, 2243, 1981, 1991, 2566, 246, 2859, 1468, 761, 1886, 2381, 3121, 611, 1366, 473, 3201, 2559, 2525, 404, 2778, 3070, 2127, 790, 446, 2220, 2044, 3047, 1071, 1978, 677, 2896, 1920, 628, 2458, 794, 1957, 2611, 2378, 358, 1781, 2772, 1945, 2118, 139, 390, 326, 1933, 2381, 215, 2311, 1169, 727, 3253, 1189, 1994, 2257, 917, 1188, 1618, 1901, 2585, 2610, 2558, 1223, 963, 2571, 1085, 3293, 3207, 1575, 938, 2753, 1846, 3148, 2372, 2668, 2442, 1495, 2661, 2716, 2208, 76, 262, 2541, 3008, 2118, 3306, 625, 185, 161, 2193, 1186, 925, 1786, 2548, 2, 1697, 3103, 3101, 2159, 2521, 1322, 2497, 138, 562, 1025, 1312, 1721, 2174, 2149, 2614, 589, 554, 2515, 2101, 1461, 153, 954, 2172, 2056, 1217, 2186, 1895, 610, 2925, 546, 2556, 618, 886, 413, 363, 85, 679, 2977, 1393, 619, 1231, 1644, 1770, 3170, 2506, 1946, 432, 59, 1516, 70, 1802, 527, 2778, 2136, 1639, 3263, 637, 1789, 307, 596, 2830, 459, 1914, 458, 749, 3210, 2592, 1894, 798, 2003, 1032, 491, 3282, 1880, 2081, 891, 1926, 2521, 264, 249, 3105, 118, 1468, 774, 1381, 2205, 1927, 1250, 3072, 2139, 489, 799, 3057, 903, 1092, 1989, 836, 1387, 2228, 2443, 891, 645, 2863, 2050, 377, 2198, 440, 2402, 424, 2338, 925, 672, 2352, 124, 3171, 850, 1089, 3183, 1864, 934, 1733, 599, 2743, 485, 2413, 2465, 1638, 2744, 106, 1372, 1299, 2047, 2521]).mont_form(),
                )).unwrap(),
            );

            Self {
                polyvecs,
                sec_level: K::Three,
            }
        }
    }

    pub(in crate::tests) fn generate_random_seed() -> [u8; 32] {
        let mut rng = StdRng::from_entropy();
        let mut seed = [0u8; 32];
        rng.fill(&mut seed);
        seed
    }

    prop_compose! {
        fn new_indcpa_keypair()
            (key_seed in prop::array::uniform32(u8::MIN..u8::MAX), sec_level in sec_level_strategy())
            -> (PrivateKey, PublicKey) {
                generate_indcpa_key_pair(&key_seed, sec_level).unwrap()
            }
    }
    #[test]
    fn compare_key() {
        let noise = PolyVec::from(array_vec!([Poly<Unreduced>; 4] =>
            Poly::from_arr(&[3065, 2399, 3064, 971, 877, 1848, 445, 180, 3254, 148, 2000, 694, 3107, 1838, 2408, 41, 1209, 2160, 1562, 1368, 1955, 3263, 2586, 2940, 1379, 2560, 1039, 2076, 3017, 1599, 3288, 3132, 3081, 231, 229, 1899, 3265, 2730, 493, 2333, 1344, 1500, 1812, 2429, 1469, 1605, 2848, 2366, 2355, 1711, 1361, 26, 2542, 2585, 3091, 2237, 2089, 3103, 1799, 3113, 2169, 3163, 3139, 986, 546, 423, 1215, 170, 1714, 2172, 1211, 326, 78, 549, 1552, 2572, 1877, 956, 1044, 1786, 3282, 3247, 3184, 2983, 1836, 2472, 3080, 166, 3101, 443, 332, 1530, 3319, 782, 344, 836, 337, 2488, 841, 2319, 876, 1313, 3277, 755, 1155, 543, 2575, 3223, 2711, 142, 2642, 1461, 3110, 3292, 2880, 2649, 621, 2689, 90, 530, 583, 3037, 2107, 122, 1405, 951, 1725, 1371, 1850, 3215, 1070, 2140, 854, 529, 1336, 720, 2059, 717, 1447, 3023, 968, 2401, 158, 445, 2923, 2875, 632, 2674, 2979, 2839, 2411, 45, 2680, 2922, 2485, 1070, 1971, 1737, 2654, 2962, 308, 1839, 763, 1225, 1541, 2600, 1798, 3030, 1207, 471, 1699, 1596, 2597, 3083, 2495, 1462, 844, 477, 2276, 1171, 2013, 248, 1811, 2362, 1706, 1673, 1854, 1494, 3109, 1501, 3250, 1997, 2948, 1315, 2489, 2303, 3094, 527, 1143, 619, 1943, 1834, 2421, 2752, 2961, 2022, 2731, 327, 1404, 2697, 2476, 833, 1621, 3130, 1821, 1747, 2499, 1410, 2053, 1515, 2089, 2298, 2753, 2926, 2768, 2696, 1066, 1962, 2959, 1288, 2538, 2115, 2579, 3241, 863, 1869, 1978, 3069, 2486, 2190, 1058, 798, 2270, 2682, 408, 249, 1541, 311, 2095, 1491, 1763, 3268, 2239, 289, 94, 278]),
            Poly::from_arr(&[1700, 821, 457, 1905, 314, 822, 1847, 2277, 2168, 1273, 2881, 2748, 3005, 643, 2891, 3057, 2997, 2731, 2394, 3245, 3005, 3129, 1673, 3145, 3029, 3175, 772, 1965, 523, 1552, 263, 2939, 592, 1547, 2221, 218, 2003, 2612, 1388, 673, 2175, 3207, 2927, 1461, 2952, 2677, 736, 480, 3303, 3038, 3073, 1896, 995, 2277, 2975, 2550, 620, 1672, 585, 1697, 1208, 2572, 17, 597, 2440, 3164, 812, 663, 2696, 1720, 3169, 925, 2223, 981, 868, 760, 1521, 911, 988, 358, 1863, 1889, 3021, 149, 1251, 741, 2631, 590, 3043, 1367, 3191, 21, 523, 762, 2957, 1259, 331, 2948, 796, 1328, 3136, 613, 2476, 1003, 615, 2354, 475, 549, 1229, 2590, 622, 3205, 3095, 2593, 1035, 1377, 2932, 1182, 338, 573, 2144, 1637, 3122, 544, 2397, 270, 3324, 1714, 1949, 2686, 94, 192, 2401, 2551, 2251, 272, 1347, 2940, 121, 988, 518, 1494, 29, 2173, 3233, 1400, 2399, 233, 1629, 789, 2190, 1530, 1793, 659, 777, 2202, 219, 515, 3035, 20, 1757, 33, 313, 870, 1466, 640, 1037, 638, 493, 2401, 744, 3152, 2686, 3152, 3210, 2872, 833, 320, 2018, 1793, 1168, 1077, 152, 3009, 1136, 1125, 284, 256, 2282, 1117, 3217, 1794, 2648, 492, 495, 2901, 1096, 1444, 1519, 365, 46, 2855, 2911, 610, 3067, 403, 1340, 762, 79, 2188, 858, 1732, 2033, 1202, 2831, 2411, 2140, 1584, 420, 1221, 1864, 1151, 274, 96, 1237, 1888, 5, 3074, 1024, 1574, 2953, 2572, 691, 1327, 617, 120, 3087, 187, 189, 2080, 124, 2897, 2707, 1960, 1339, 783, 1004, 1563, 2295, 3041, 2467, 1848, 1288, 3216, 2524, 1997]),
            Poly::from_arr(&[750, 2123, 1238, 270, 253, 1469, 44, 3217, 1247, 2153, 2910, 2238, 2350, 1250, 1370, 1865, 2306, 1062, 916, 2068, 1316, 1097, 2156, 2722, 1936, 38, 2273, 1017, 2084, 2720, 611, 950, 495, 650, 2109, 1023, 2956, 1602, 840, 2803, 1348, 1207, 502, 1042, 2204, 3287, 2085, 1063, 1836, 2963, 31, 2702, 3066, 299, 2133, 3102, 668, 704, 1908, 1127, 1580, 1573, 1588, 1584, 2126, 1133, 2989, 1713, 695, 1319, 2830, 2781, 1588, 3012, 2308, 1266, 465, 534, 607, 1001, 1324, 3124, 1048, 1023, 3180, 2969, 1277, 1688, 3167, 384, 3153, 169, 2622, 271, 2602, 3110, 1661, 1413, 1946, 2404, 1164, 2866, 3043, 2585, 262, 3065, 1808, 2082, 401, 625, 1028, 2882, 1163, 1584, 3229, 2042, 2356, 1650, 1025, 438, 2, 2476, 703, 2450, 126, 978, 112, 2195, 42, 1603, 2882, 2914, 1674, 890, 2649, 833, 1793, 2044, 420, 1019, 2533, 1481, 3034, 3245, 3262, 234, 2967, 2938, 1602, 83, 2288, 1857, 723, 2544, 716, 1781, 2455, 494, 1452, 1767, 1285, 2332, 3006, 1878, 524, 3024, 2491, 2486, 1802, 406, 2715, 681, 490, 2438, 144, 2041, 1135, 291, 1715, 1640, 426, 2174, 1100, 1183, 1250, 2313, 3181, 2784, 1860, 625, 914, 682, 901, 2062, 2624, 2439, 354, 2322, 2154, 2973, 2947, 3170, 1192, 905, 554, 157, 2914, 2512, 929, 1948, 1737, 2949, 131, 1539, 2210, 1180, 1947, 2774, 704, 1691, 2548, 806, 2794, 2084, 433, 1153, 1608, 648, 1132, 2490, 2484, 656, 935, 1250, 3051, 3020, 1445, 100, 2054, 2737, 2398, 476, 467, 2759, 961, 1869, 1609, 1045, 2493, 870, 3181, 2599, 1893, 1908, 548, 1673])
        )).unwrap().normalise();

        let rho = [216, 17, 145, 112, 104, 44, 220, 160, 102, 24, 217, 187, 231, 175, 1, 61, 77, 228, 144, 197, 40, 188, 178, 237, 151, 66, 203, 184, 231, 204, 11, 173];

        let a_t = Matrix::test_mat();

        let pk = PublicKey {
            noise,
            rho,
            a_t,
        };

        let secret = PolyVec::from(array_vec!([Poly<Unreduced>; 4] =>
            Poly::from_arr(&[453, 1191, 2643, 406, 72, 652, 3114, 559, 1823, 1449, 1389, 1455, 2990, 1463, 2101, 1839, 1250, 3023, 1590, 172, 402, 2882, 48, 2837, 922, 3047, 2846, 572, 1364, 2895, 2996, 452, 412, 67, 2576, 1301, 3030, 785, 2242, 2235, 2589, 2686, 1630, 2381, 111, 1970, 3312, 3119, 2567, 1069, 3090, 1604, 497, 1495, 2743, 1312, 938, 2061, 507, 160, 2629, 318, 2469, 1012, 1567, 1275, 3188, 2808, 2917, 392, 27, 2508, 1482, 1985, 173, 1770, 2668, 3145, 593, 3250, 1406, 38, 958, 2291, 145, 676, 2484, 2579, 977, 2146, 2590, 880, 2433, 659, 1444, 1024, 2356, 337, 2452, 1336, 558, 339, 1418, 3080, 1894, 2042, 1452, 598, 2825, 2183, 2060, 326, 966, 340, 2268, 2187, 2654, 277, 797, 1703, 2551, 2100, 1972, 891, 2504, 2687, 2797, 156, 2536, 565, 2923, 1891, 1850, 2639, 2077, 356, 2938, 674, 1173, 1448, 1098, 1117, 3072, 2116, 767, 2784, 2268, 682, 60, 194, 31, 2826, 2421, 1677, 2064, 1563, 1629, 784, 400, 2387, 2415, 1532, 361, 2162, 2951, 2082, 3144, 3312, 1905, 845, 490, 1818, 3048, 2372, 572, 3168, 306, 528, 3092, 2247, 2429, 2887, 1590, 843, 744, 1383, 1105, 403, 1523, 23, 850, 645, 1184, 206, 2380, 2410, 2280, 2429, 72, 2850, 1786, 288, 749, 2428, 1996, 2502, 2553, 339, 2357, 2212, 1281, 11, 747, 586, 945, 1536, 3146, 3232, 2642, 1365, 1592, 561, 2123, 559, 2015, 889, 805, 2452, 2497, 2260, 1218, 743, 2360, 2222, 1041, 1564, 1017, 2235, 2736, 1365, 570, 1744, 556, 927, 2887, 171, 2088, 1656, 976, 1091, 2875, 1955, 920, 2298, 2768, 2767]),
            Poly::from_arr(&[1498, 2773, 412, 319, 2473, 1214, 2322, 458, 564, 2372, 1134, 2117, 1346, 2514, 3077, 2894, 1691, 1428, 12, 2165, 1856, 1415, 3149, 1757, 1890, 1620, 82, 2651, 3278, 671, 2795, 1787, 1241, 824, 537, 8, 110, 2153, 3146, 3159, 3019, 452, 1109, 1979, 485, 1616, 2979, 960, 552, 1111, 2056, 719, 1679, 1493, 87, 1175, 460, 2138, 2612, 169, 1900, 155, 2465, 3101, 3048, 1059, 2224, 1000, 1755, 3046, 3127, 1851, 2393, 687, 622, 2194, 416, 405, 1935, 563, 537, 2814, 2739, 3007, 1951, 2405, 2944, 1162, 2248, 2275, 2860, 1011, 136, 1209, 2259, 427, 1586, 1147, 1054, 235, 3104, 10, 2134, 1687, 2654, 1276, 2873, 324, 1856, 1010, 2882, 1200, 238, 1651, 197, 2128, 338, 2052, 2031, 2497, 1646, 2567, 106, 3278, 248, 2771, 435, 2418, 1560, 113, 242, 560, 2217, 310, 1931, 360, 2875, 618, 2140, 2896, 1192, 908, 723, 2897, 824, 1516, 1828, 978, 3170, 1587, 2477, 2356, 2041, 757, 1555, 745, 630, 1267, 121, 2782, 2674, 87, 2928, 3080, 200, 2098, 329, 455, 806, 999, 2400, 1989, 887, 1922, 2240, 2337, 608, 610, 808, 3324, 949, 2120, 2670, 384, 2014, 3209, 984, 1012, 1122, 1977, 2157, 2930, 1885, 2200, 2018, 577, 629, 1421, 3204, 1530, 493, 1911, 1190, 2227, 1783, 555, 3303, 422, 690, 570, 1063, 1167, 1240, 2270, 1394, 2834, 131, 1212, 841, 902, 646, 89, 976, 2529, 805, 2514, 1025, 1240, 1049, 364, 1135, 2440, 965, 1939, 641, 741, 1634, 735, 1755, 2634, 2528, 1511, 1099, 2126, 1476, 1113, 551, 2584, 3084, 1551, 1674, 67, 230, 1889, 2837, 759]),
            Poly::from_arr(&[2731, 3113, 1872, 1512, 2284, 268, 2177, 178, 746, 211, 1308, 2187, 940, 2779, 466, 529, 2021, 2279, 2745, 3136, 2233, 759, 480, 289, 365, 1246, 1295, 2536, 1925, 2697, 779, 783, 1896, 317, 322, 1964, 1600, 54, 3273, 1998, 1961, 580, 2327, 2068, 2026, 2906, 1851, 1257, 967, 429, 2700, 2426, 533, 827, 1212, 1858, 2816, 1166, 447, 1384, 3150, 100, 1119, 739, 1769, 689, 1710, 1737, 397, 234, 2507, 1327, 214, 128, 114, 1900, 1741, 2489, 1568, 2378, 3296, 2931, 47, 2344, 604, 2230, 2857, 1179, 666, 2147, 674, 1713, 2982, 833, 418, 826, 2837, 1893, 23, 648, 975, 1919, 2099, 3232, 1429, 3054, 2622, 1255, 3280, 1425, 2023, 801, 1490, 677, 1327, 1512, 1255, 2652, 2494, 1082, 685, 47, 2370, 1832, 1246, 3274, 2849, 1514, 2653, 1561, 421, 1779, 2567, 2118, 1206, 1894, 1945, 837, 871, 1729, 2065, 2850, 2528, 2195, 2075, 2836, 3220, 2222, 1263, 1344, 1374, 318, 648, 2192, 2048, 1450, 2427, 1866, 1901, 2055, 1865, 3255, 411, 387, 2243, 437, 2119, 1383, 1298, 2692, 3098, 90, 2824, 349, 1569, 542, 1375, 2098, 2456, 518, 3192, 1144, 882, 3096, 1710, 2196, 1008, 529, 33, 2940, 3315, 1561, 847, 2318, 2172, 2241, 3168, 874, 687, 2900, 3123, 1530, 1253, 1550, 1562, 765, 1216, 1679, 3051, 2452, 3211, 776, 1184, 386, 437, 480, 412, 3213, 3192, 2224, 2940, 1460, 3135, 2514, 1144, 688, 723, 1856, 834, 1750, 975, 2361, 813, 847, 3294, 1155, 820, 2787, 408, 833, 2495, 149, 2398, 966, 3023, 1687, 1562, 2997, 204, 2501, 1553, 379, 1678, 2509, 998, 3174])
        )).unwrap().normalise();

        let sk = PrivateKey { secret };

        let cipher_seed: [u8; 32] = core::array::from_fn(|i| (i + 1) as u8);

        let ciphertext = pk.encrypt(&cipher_seed, &cipher_seed).unwrap();

        let message = sk.decrypt(&ciphertext).unwrap();

        // assert_eq!(message, cipher_seed);
    }


    proptest! {
        #[test]
        fn key_gen_enc_dec(
            (priv_key, pub_key) in new_indcpa_keypair(),
            cipher_seed in prop::array::uniform32(u8::MIN..u8::MAX)
        ) {
            // let plaintext = generate_random_seed();
            let plaintext: [u8; 32] = core::array::from_fn(|i| (i + 1) as u8);

            let ciphertext = pub_key.encrypt(&plaintext, &cipher_seed).unwrap();

            let message = priv_key.decrypt(&ciphertext).unwrap();

            // assert_eq!(message, plaintext);
        }

        #[test]
        fn key_pack_unpack(
            (priv_key, pub_key) in new_indcpa_keypair(),
        ) {
            let mut buf = [0u8; 2 * (4 * POLYBYTES) + SYMBYTES];

            let k:usize = priv_key.sec_level().k().into();
            let _ = priv_key.pack(&mut buf[..k * POLYBYTES]);
            let _ = pub_key.pack(&mut buf[k * POLYBYTES..2 * (k * POLYBYTES) + SYMBYTES]);

            let unpacked_priv = PrivateKey::unpack(&buf[..k * POLYBYTES]).unwrap();
            let unpacked_pub = PublicKey::unpack(&buf[k * POLYBYTES..2 * (k * POLYBYTES) + SYMBYTES]).unwrap();

            assert_eq!(unpacked_pub, pub_key);
            assert_eq!(unpacked_priv, priv_key);
        }

        #[test]
        #[should_panic]
        fn pub_key_pack_bad_buf_len(
            bad_bytes_len in 1..4 * POLYBYTES + SYMBYTES + 100,
            (_, pub_key) in new_indcpa_keypair(),
        ) {
            if bad_bytes_len == <K as Into<usize>>::into(pub_key.sec_level().k()) * POLYBYTES + SYMBYTES {
                panic!()
            }
            let mut bad_key_bytes = [0u8; 4 * POLYBYTES + SYMBYTES + 100];

            let pack_err = pub_key.pack(&mut bad_key_bytes[..bad_bytes_len]).unwrap();
        }

        #[test]
        #[should_panic]
        fn pub_key_unpack_bad_buf_len(
            bad_bytes_len in 1..4 * POLYBYTES + SYMBYTES + 100,
            (_, pub_key) in new_indcpa_keypair(),
        ) {
            if bad_bytes_len == <K as Into<usize>>::into(pub_key.sec_level().k()) * POLYBYTES + SYMBYTES {
                panic!()
            }
            let mut bad_key_bytes = [0u8; 4 * POLYBYTES + SYMBYTES + 100];

            let unpack_err = PublicKey::unpack(&bad_key_bytes[..bad_bytes_len]).unwrap();
        }

        #[test]
        #[should_panic]
        fn decrypt_bad_ciphertext_len(
            bad_bytes_len in 1..2048usize,
            (priv_key, _) in new_indcpa_keypair()
        ) {
            if bad_bytes_len as usize == priv_key.sec_level().indcpa_bytes() {
                panic!()
            }
            let bad_ciphertext = ArrayVec::<[u8; 2048]>::from_array_len([0u8; 2048], bad_bytes_len);

            let decrypt_err = priv_key.decrypt(&bad_ciphertext).unwrap();
        }
    }
}
